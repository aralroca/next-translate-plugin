// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`templateAppDir should hydrate (if is not done yet) the translations in a client component (already have the namespaces from the page) pageNoExt: /about/us/component | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";
import useTranslation from \\"next-translate/useTranslation\\";
function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Component {...props} />;
}
"
`;

exports[`templateAppDir should hydrate (if is not done yet) the translations in a client component (already have the namespaces from the page) pageNoExt: /component | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";
import useTranslation from \\"next-translate/useTranslation\\";
function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Component {...props} />;
}
"
`;

exports[`templateAppDir should hydrate (if is not done yet) the translations in a client component (already have the namespaces from the page) pageNoExt: /component | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";
import useTranslation from \\"next-translate/useTranslation\\";
function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Component {...props} />;
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-dynamic pageNoExt: /about/us/page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-dynamic\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-dynamic pageNoExt: /page | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-dynamic\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-dynamic pageNoExt: /page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-dynamic\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-static pageNoExt: /about/us/page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-static pageNoExt: /page | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-static pageNoExt: /page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page without dynamic export pageNoExt: /about/us/page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page without dynamic export pageNoExt: /page | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load translations in a server page without dynamic export pageNoExt: /page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load using an useEffect the translations in a client page ("use client" with double quotes and comment before) pageNoExt: /about/us/page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";

// Some comment before
/*
  Another comment before
*/
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an useEffect the translations in a client page ("use client" with double quotes and comment before) pageNoExt: /page | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";

// Some comment before
/*
  Another comment before
*/
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an useEffect the translations in a client page ("use client" with double quotes and comment before) pageNoExt: /page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";

// Some comment before
/*
  Another comment before
*/
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an useEffect the translations in a client page ('use client\` with simple quotes) pageNoExt: /about/us/page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an useEffect the translations in a client page ('use client\` with simple quotes) pageNoExt: /page | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an useEffect the translations in a client page ('use client\` with simple quotes) pageNoExt: /page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import * as __react from \\"react\\";
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const forceUpdate = __react.useReducer(() => [])[1];
  const isClient = typeof window !== \\"undefined\\";

  if (isClient && !window.__NEXT_TRANSLATE__) {
    window.__NEXT_TRANSLATE__ = {
      lang: __i18nConfig.defaultLocale,
      namespaces: {},
    };
    update(false);
  }

  if (isClient && !window.i18nConfig) {
    window.i18nConfig = __i18nConfig;
  }

  __react.useEffect(update);

  function update(rerender = true) {
    const el = document.getElementById(\\"__NEXT_TRANSLATE_DATA__\\");

    if (!el) return;

    const { lang, ns, pathname } = el.dataset;
    const shouldRerender =
      lang !== window.__NEXT_TRANSLATE__.lang ||
      pathname !== window.__NEXT_TRANSLATE__.pathname;
    window.__NEXT_TRANSLATE__ = { lang, namespaces: JSON.parse(ns), pathname };
    if (shouldRerender && rerender) forceUpdate();
  }

  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should not do any transformation in a server component (already have the namespaces from the page) pageNoExt: /about/us/component | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not do any transformation in a server component (already have the namespaces from the page) pageNoExt: /component | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not do any transformation in a server component (already have the namespaces from the page) pageNoExt: /component | normalizedResourcePath: /Users/username/Projects/nextjs-blog/app/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not transform any page outside app dir pageNoExt: /about/us/page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not transform any page outside app dir pageNoExt: /page | hasLoadLocaleFrom: true | normalizedResourcePath: /Users/username/Projects/nextjs-blog/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not transform any page outside app dir pageNoExt: /page | normalizedResourcePath: /Users/username/Projects/nextjs-blog/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";
export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;
