// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`templateAppDir should load translations in a error page pageNoExt: /about/us/error | normalizedResourcePath: app/about/us/error.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Error() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Error {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Error {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /error\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Error {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a error page pageNoExt: /about/us/error | normalizedResourcePath: packages/app/about/us/error.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Error() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Error {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Error {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /error\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Error {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a error page pageNoExt: /error | normalizedResourcePath: app/error.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Error() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Error {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Error {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /error\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Error {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a error page pageNoExt: /error | normalizedResourcePath: packages/app/error.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Error() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Error {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Error {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /error\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Error {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a global-error page pageNoExt: /about/us/global-error | normalizedResourcePath: app/about/us/global-error.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function GlobalError() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <GlobalError {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <GlobalError {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /global-error\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <GlobalError {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a global-error page pageNoExt: /about/us/global-error | normalizedResourcePath: packages/app/about/us/global-error.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function GlobalError() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <GlobalError {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <GlobalError {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /global-error\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <GlobalError {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a global-error page pageNoExt: /global-error | normalizedResourcePath: app/global-error.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function GlobalError() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <GlobalError {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <GlobalError {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /global-error\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <GlobalError {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a global-error page pageNoExt: /global-error | normalizedResourcePath: packages/app/global-error.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function GlobalError() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <GlobalError {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <GlobalError {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /global-error\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <GlobalError {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a layout pageNoExt: /about/us/layout | normalizedResourcePath: app/about/us/layout.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Layout() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Layout {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Layout {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /layout\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Layout {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a layout pageNoExt: /about/us/layout | normalizedResourcePath: packages/app/about/us/layout.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Layout() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Layout {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Layout {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /layout\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Layout {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a layout pageNoExt: /layout | normalizedResourcePath: app/layout.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Layout() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Layout {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Layout {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /layout\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Layout {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a layout pageNoExt: /layout | normalizedResourcePath: packages/app/layout.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Layout() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Layout {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Layout {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /layout\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Layout {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a loading page pageNoExt: /about/us/loading | normalizedResourcePath: app/about/us/loading.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Loading() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Loading {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Loading {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /loading\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Loading {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a loading page pageNoExt: /about/us/loading | normalizedResourcePath: packages/app/about/us/loading.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Loading() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Loading {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Loading {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /loading\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Loading {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a loading page pageNoExt: /loading | normalizedResourcePath: app/loading.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Loading() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Loading {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Loading {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /loading\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Loading {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a loading page pageNoExt: /loading | normalizedResourcePath: packages/app/loading.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Loading() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Loading {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <Loading {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /loading\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Loading {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a not-found page pageNoExt: /about/us/not-found | normalizedResourcePath: app/about/us/not-found.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function NotFound() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <NotFound {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <NotFound {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /not-found\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <NotFound {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a not-found page pageNoExt: /about/us/not-found | normalizedResourcePath: packages/app/about/us/not-found.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function NotFound() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <NotFound {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <NotFound {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /not-found\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <NotFound {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a not-found page pageNoExt: /not-found | normalizedResourcePath: app/not-found.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function NotFound() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <NotFound {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <NotFound {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /not-found\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <NotFound {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a not-found page pageNoExt: /not-found | normalizedResourcePath: packages/app/not-found.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function NotFound() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <NotFound {...props} />;

  if (globalThis.__NEXT_TRANSLATE__ && !detectedLang)
    return <NotFound {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /not-found\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <NotFound {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-dynamic pageNoExt: /about/us/page | normalizedResourcePath: app/about/us/page.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-dynamic\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-dynamic pageNoExt: /about/us/page | normalizedResourcePath: packages/app/about/us/page.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-dynamic\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-dynamic pageNoExt: /page | normalizedResourcePath: app/page.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-dynamic\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-dynamic pageNoExt: /page | normalizedResourcePath: packages/app/page.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-dynamic\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-static pageNoExt: /about/us/page | normalizedResourcePath: app/about/us/page.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-static pageNoExt: /about/us/page | normalizedResourcePath: packages/app/about/us/page.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-static pageNoExt: /page | normalizedResourcePath: app/page.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page with dynamic export force-static pageNoExt: /page | normalizedResourcePath: packages/app/page.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page without dynamic export pageNoExt: /about/us/page | normalizedResourcePath: app/about/us/page.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page without dynamic export pageNoExt: /about/us/page | normalizedResourcePath: packages/app/about/us/page.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/about/us/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page without dynamic export pageNoExt: /page | normalizedResourcePath: app/page.js | appFolder: app 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load translations in a server page without dynamic export pageNoExt: /page | normalizedResourcePath: packages/app/page.js | appFolder: app/ 1`] = `
"import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

import useTranslation from \\"next-translate/useTranslation\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default async function __Next_Translate_new__88d9831a00__(props) {
  const params = await props.params;
  const searchParams = await props.searchParams;
  const detectedLang = params?.lang ?? searchParams?.lang;

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const config = {
    ...__i18nConfig,
    locale: detectedLang ?? __i18nConfig.defaultLocale,
    loaderName: \\"server /page\\",
    pathname: \\"/\\",
  };

  const { __lang, __namespaces } = await __loadNamespaces({
    ...config,
    loadLocaleFrom:
      (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
      ((l, n) =>
        import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
          (m) => m.default
        )),
  });

  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  const namespaces = { ...oldNamespaces, ...__namespaces };

  globalThis.__NEXT_TRANSLATE__ = { lang: __lang, namespaces, config };

  return (
    <AppDirI18nProvider
      lang={__lang}
      namespaces={namespaces}
      config={JSON.parse(JSON.stringify(config))}
    >
      <Page {...props} />
    </AppDirI18nProvider>
  );
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in a client component with named export (already have the namespaces from the page) isClientComponent: false | pageNoExt: /component | normalizedResourcePath: app/component.js | appFolder: app 1`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in a client component with named export (already have the namespaces from the page) isClientComponent: true | pageNoExt: /component | normalizedResourcePath: app/component.js | appFolder: app 1`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in a client component with named export (already have the namespaces from the page) pageNoExt: /about/us/component | normalizedResourcePath: app/about/us/component.js | appFolder: app | isClientComponent: true 1`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in a client page ("use client" with double quotes and comment before) isClientComponent: true | pageNoExt: /about/us/page | normalizedResourcePath: app/about/us/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import {
  useSearchParams as __useSearchParams,
  useParams as __useParams,
} from \\"next/navigation\\";
import { use as __use, Suspense as __Suspense } from \\"react\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

// Some comment before
/*
  Another comment before
*/
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const searchParams = __useSearchParams();
  const params = __useParams();
  const detectedLang = params.lang ?? searchParams.get(\\"lang\\");

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const lang = detectedLang ?? __i18nConfig.defaultLocale;
  const config = {
    ...__i18nConfig,
    locale: lang,
    loaderName: \\"client /page\\",
    pathname: \\"/about/us/\\",
  };

  return (
    <__Suspense fallback={null}>
      <__Next_Translate__child__88d9831a00__
        {...props}
        config={config}
        promise={__loadNamespaces({
          ...config,
          loadLocaleFrom:
            (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
            ((l, n) =>
              import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
                (m) => m.default
              )),
        })}
      />
    </__Suspense>
  );
}

function __Next_Translate__child__88d9831a00__({ promise, config, ...props }) {
  const { __lang, __namespaces } = __use(promise);
  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  globalThis.__NEXT_TRANSLATE__ = {
    lang: __lang,
    namespaces: { ...oldNamespaces, ...__namespaces },
    config,
  };
  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in a client page ("use client" with double quotes and comment before) isClientComponent: true | pageNoExt: /page | normalizedResourcePath: app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import {
  useSearchParams as __useSearchParams,
  useParams as __useParams,
} from \\"next/navigation\\";
import { use as __use, Suspense as __Suspense } from \\"react\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

// Some comment before
/*
  Another comment before
*/
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const searchParams = __useSearchParams();
  const params = __useParams();
  const detectedLang = params.lang ?? searchParams.get(\\"lang\\");

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const lang = detectedLang ?? __i18nConfig.defaultLocale;
  const config = {
    ...__i18nConfig,
    locale: lang,
    loaderName: \\"client /page\\",
    pathname: \\"/\\",
  };

  return (
    <__Suspense fallback={null}>
      <__Next_Translate__child__88d9831a00__
        {...props}
        config={config}
        promise={__loadNamespaces({
          ...config,
          loadLocaleFrom:
            (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
            ((l, n) =>
              import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
                (m) => m.default
              )),
        })}
      />
    </__Suspense>
  );
}

function __Next_Translate__child__88d9831a00__({ promise, config, ...props }) {
  const { __lang, __namespaces } = __use(promise);
  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  globalThis.__NEXT_TRANSLATE__ = {
    lang: __lang,
    namespaces: { ...oldNamespaces, ...__namespaces },
    config,
  };
  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in a client page ("use client" with double quotes and comment before) isClientComponent: true | pageNoExt: /page | normalizedResourcePath: app/page.js | appFolder: app 2`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import {
  useSearchParams as __useSearchParams,
  useParams as __useParams,
} from \\"next/navigation\\";
import { use as __use, Suspense as __Suspense } from \\"react\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";

// Some comment before
/*
  Another comment before
*/
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const searchParams = __useSearchParams();
  const params = __useParams();
  const detectedLang = params.lang ?? searchParams.get(\\"lang\\");

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const lang = detectedLang ?? __i18nConfig.defaultLocale;
  const config = {
    ...__i18nConfig,
    locale: lang,
    loaderName: \\"client /page\\",
    pathname: \\"/\\",
  };

  return (
    <__Suspense fallback={null}>
      <__Next_Translate__child__88d9831a00__
        {...props}
        config={config}
        promise={__loadNamespaces({
          ...config,
          loadLocaleFrom:
            (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
            ((l, n) =>
              import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
                (m) => m.default
              )),
        })}
      />
    </__Suspense>
  );
}

function __Next_Translate__child__88d9831a00__({ promise, config, ...props }) {
  const { __lang, __namespaces } = __use(promise);
  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  globalThis.__NEXT_TRANSLATE__ = {
    lang: __lang,
    namespaces: { ...oldNamespaces, ...__namespaces },
    config,
  };
  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in client component (already have the namespaces from the page) isClientComponent: true | pageNoExt: /component | normalizedResourcePath: app/component.js | appFolder: app 1`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in client component (already have the namespaces from the page) isClientComponent: true | pageNoExt: /component | normalizedResourcePath: app/component.js | appFolder: app 2`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load using an "use" client hook the translations in client component (already have the namespaces from the page) pageNoExt: /about/us/component | normalizedResourcePath: app/about/us/component.js | appFolder: app | isClientComponent: true 1`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should load using an 'use' client hook the translations in a client page ('use client' with simple quotes) isClientComponent: true | pageNoExt: /about/us/page | normalizedResourcePath: app/about/us/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import {
  useSearchParams as __useSearchParams,
  useParams as __useParams,
} from \\"next/navigation\\";
import { use as __use, Suspense as __Suspense } from \\"react\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const searchParams = __useSearchParams();
  const params = __useParams();
  const detectedLang = params.lang ?? searchParams.get(\\"lang\\");

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const lang = detectedLang ?? __i18nConfig.defaultLocale;
  const config = {
    ...__i18nConfig,
    locale: lang,
    loaderName: \\"client /page\\",
    pathname: \\"/about/us/\\",
  };

  return (
    <__Suspense fallback={null}>
      <__Next_Translate__child__88d9831a00__
        {...props}
        config={config}
        promise={__loadNamespaces({
          ...config,
          loadLocaleFrom:
            (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
            ((l, n) =>
              import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
                (m) => m.default
              )),
        })}
      />
    </__Suspense>
  );
}

function __Next_Translate__child__88d9831a00__({ promise, config, ...props }) {
  const { __lang, __namespaces } = __use(promise);
  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  globalThis.__NEXT_TRANSLATE__ = {
    lang: __lang,
    namespaces: { ...oldNamespaces, ...__namespaces },
    config,
  };
  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an 'use' client hook the translations in a client page ('use client' with simple quotes) isClientComponent: true | pageNoExt: /page | normalizedResourcePath: app/page.js | appFolder: app 1`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import {
  useSearchParams as __useSearchParams,
  useParams as __useParams,
} from \\"next/navigation\\";
import { use as __use, Suspense as __Suspense } from \\"react\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const searchParams = __useSearchParams();
  const params = __useParams();
  const detectedLang = params.lang ?? searchParams.get(\\"lang\\");

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const lang = detectedLang ?? __i18nConfig.defaultLocale;
  const config = {
    ...__i18nConfig,
    locale: lang,
    loaderName: \\"client /page\\",
    pathname: \\"/\\",
  };

  return (
    <__Suspense fallback={null}>
      <__Next_Translate__child__88d9831a00__
        {...props}
        config={config}
        promise={__loadNamespaces({
          ...config,
          loadLocaleFrom:
            (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
            ((l, n) =>
              import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
                (m) => m.default
              )),
        })}
      />
    </__Suspense>
  );
}

function __Next_Translate__child__88d9831a00__({ promise, config, ...props }) {
  const { __lang, __namespaces } = __use(promise);
  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  globalThis.__NEXT_TRANSLATE__ = {
    lang: __lang,
    namespaces: { ...oldNamespaces, ...__namespaces },
    config,
  };
  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should load using an 'use' client hook the translations in a client page ('use client' with simple quotes) isClientComponent: true | pageNoExt: /page | normalizedResourcePath: app/page.js | appFolder: app 2`] = `
"\\"use client\\";
import __i18nConfig from \\"@next-translate-root/i18n\\";
import AppDirI18nProvider from \\"next-translate/AppDirI18nProvider\\";
import {
  useSearchParams as __useSearchParams,
  useParams as __useParams,
} from \\"next/navigation\\";
import { use as __use, Suspense as __Suspense } from \\"react\\";
import __loadNamespaces from \\"next-translate/loadNamespaces\\";
import useTranslation from \\"next-translate/useTranslation\\";
export const dynamic = \\"force-static\\";
function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}

export default function __Next_Translate_new__88d9831a00__(props) {
  const searchParams = __useSearchParams();
  const params = __useParams();
  const detectedLang = params.lang ?? searchParams.get(\\"lang\\");

  if (detectedLang === \\"favicon.ico\\") return <Page {...props} />;

  const lang = detectedLang ?? __i18nConfig.defaultLocale;
  const config = {
    ...__i18nConfig,
    locale: lang,
    loaderName: \\"client /page\\",
    pathname: \\"/\\",
  };

  return (
    <__Suspense fallback={null}>
      <__Next_Translate__child__88d9831a00__
        {...props}
        config={config}
        promise={__loadNamespaces({
          ...config,
          loadLocaleFrom:
            (__i18nConfig && __i18nConfig.loadLocaleFrom) ||
            ((l, n) =>
              import(\`@next-translate-root/locales/\${l}/\${n}\`).then(
                (m) => m.default
              )),
        })}
      />
    </__Suspense>
  );
}

function __Next_Translate__child__88d9831a00__({ promise, config, ...props }) {
  const { __lang, __namespaces } = __use(promise);
  const oldNamespaces = globalThis.__NEXT_TRANSLATE__?.namespaces ?? {};
  globalThis.__NEXT_TRANSLATE__ = {
    lang: __lang,
    namespaces: { ...oldNamespaces, ...__namespaces },
    config,
  };
  return <Page {...props} />;
}
"
`;

exports[`templateAppDir should not do any transformation in a server component (already have the namespaces from the page) pageNoExt: /about/us/component | normalizedResourcePath: app/about/us/component.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";

export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not do any transformation in a server component (already have the namespaces from the page) pageNoExt: /component | normalizedResourcePath: app/component.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";

export default function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not transform a client component if there are no consuming translations isClientComponent: true | pageNoExt: /about/us/component | normalizedResourcePath: app/about/us/component.js | appFolder: app 1`] = `
"// Some comment before

/* 
        Another comment before
      */
\\"use client\\";

export default function Component() {
  return <h1>Should not convert this component</h1>;
}
"
`;

exports[`templateAppDir should not transform a client component if there are no consuming translations isClientComponent: true | pageNoExt: /component | normalizedResourcePath: /components/component.js | appFolder: app 1`] = `
"// Some comment before

/* 
        Another comment before
      */
\\"use client\\";

export default function Component() {
  return <h1>Should not convert this component</h1>;
}
"
`;

exports[`templateAppDir should not transform a client component if there are no consuming translations isClientComponent: true | pageNoExt: /component | normalizedResourcePath: app/component.js | appFolder: app 1`] = `
"// Some comment before

/* 
        Another comment before
      */
\\"use client\\";

export default function Component() {
  return <h1>Should not convert this component</h1>;
}
"
`;

exports[`templateAppDir should not transform any page outside app dir pageNoExt: /about/us/page | normalizedResourcePath: /components/about/us/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";

export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should not transform any page outside app dir pageNoExt: /page | normalizedResourcePath: /components/page.js | appFolder: app 1`] = `
"import useTranslation from \\"next-translate/useTranslation\\";

export default function Page() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should use an empty loader fallback if doesnt have any namespaces inside locales/{lang}/\${namespace} isClientComponent: true | existLocalesFolder: false | pageNoExt: /component | normalizedResourcePath: app/component.js | appFolder: app 1`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;

exports[`templateAppDir should use an empty loader fallback if doesnt have any namespaces inside locales/{lang}/\${namespace} pageNoExt: /about/us/component | normalizedResourcePath: app/about/us/component.js | appFolder: app | isClientComponent: true | existLocalesFolder: false 1`] = `
"\\"use client\\";

import useTranslation from \\"next-translate/useTranslation\\";

export function Component() {
  const { t, lang } = useTranslation(\\"common\\");
  return <h1>{t(\\"title\\")}</h1>;
}
"
`;
